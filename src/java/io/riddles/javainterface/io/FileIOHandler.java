/*
 * Copyright 2016 riddles.io (developers@riddles.io)
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 *     For the full copyright and license information, please view the LICENSE
 *     file that was distributed with this source code.
 */

package io.riddles.javainterface.io;

import java.io.*;
import java.nio.charset.Charset;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * io.riddles.javainterface.io.IOHandler - Created on 2-6-16
 *
 * DO NOT EDIT THIS FILE
 *
 * Handles all communication from and to the game wrapper
 * (so also to the bots as well)
 *
 * @author Jim van Eeden - jim@riddles.io
 */
public class FileIOHandler extends IOHandler implements BotIOInterface {
    protected final static Logger LOGGER = Logger.getLogger(FileIOHandler.class.getName());
    protected BufferedReader reader;

    // used for debugging only
    public FileIOHandler(String inputFile) {
        try {
            InputStream fis = new FileInputStream(inputFile);
            InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
            this.reader = new BufferedReader(isr);
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, ex.toString(), ex);
        }
    }

    /**
     * Get next line from one of the two input streams
     * @return The next line
     * @throws IOException IOException
     */
    @Override
    public String getNextMessage() throws IOException {
        if (this.reader != null) {
            return getNextMessageFromFile();
        }
        throw new IOException("Reader is null.");
    }

    /**
     * Send a message to the game wrapper
     * @param message Message to send
     */
    @Override
    public void sendMessage(String message) {
        System.out.println(message);
    }

    @Override
    public String sendRequest(String request) {
        try {
            return getNextMessage();
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public void sendWarning(String warning) {
        System.out.println("Warning: " + warning);
    }

    /**
     * Get next message from given file
     * @return The next line in the file
     * @throws IOException Exception
     */
    private String getNextMessageFromFile() throws IOException {
        String line = reader.readLine();

        if (line != null) {
            LOGGER.info(line);
            return line;
        }

        throw new IOException("No more input.");
    }
}
